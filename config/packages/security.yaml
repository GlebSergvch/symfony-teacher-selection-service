when@dev:
    security:
        # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
        providers:
            app_user_provider:
                entity:
                    class: App\Entity\User
                    property: login
        firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false
            token:
                pattern: ^/api/v1/token
                security: false
            main:
                lazy: true
                provider: app_user_provider
                stateless: true
                custom_authenticator: App\Security\JWTTokenAuthenticator

                # activate different ways to authenticate
                # https://symfony.com/doc/current/security.html#the-firewall

                # https://symfony.com/doc/current/security/impersonating_user.html
                # switch_user: true

        # Easy way to control access for large sections of your site
        # Note: Only the *first* access control that matches will be used
        access_control:
            # - { path: ^/admin, roles: ROLE_ADMIN }
            # - { path: ^/profile, roles: ROLE_USER }
            - { path: ^/api/v2/user, roles: ROLE_VIEW, methods: [GET] }
            - { path: ^/api/v2/user, roles: ROLE_ADMIN, methods: [DELETE] }
            - { path: ^/api/v1/user, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: [POST] }
            - { path: ^/api/v1/user, roles: [ROLE_STUDENT], methods: [GET] }

            - { path: ^/api/v1/group, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: [POST, PATCH, DELETE] }
            - { path: ^/api/v1/group, roles: [ROLE_USER], methods: [GET] }
            - { path: ^/api/v1/skill, roles: [ROLE_ADMIN], methods: [POST, PATCH, DELETE] }
            - { path: ^/api/v1/skill, roles: [ROLE_USER], methods: [GET] }
            - { path: ^/api/v1/student-group, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: [POST, PATCH, DELETE] }
            - { path: ^/api/v1/student-group, roles: [ROLE_USER], methods: [GET] }
            - { path: ^/api/v1/teacher-skill, roles: [ROLE_TEACHER, ROLE_ADMIN], methods: [POST, PATCH, DELETE] }
            - { path: ^/api/v1/teacher-skill, roles: [ROLE_USER], methods: [GET] }

        role_hierarchy:
            ROLE_ADMIN:
                - ROLE_VIEW

        access_decision_manager:
            strategy: consensus

when@test:
    security:
        enable_authenticator_manager: true
        providers:
            users_in_memory:
                memory:
                    users:
                        admin:
                            password: 'my_pass'
                            roles: 'ROLE_ADMIN'
                        user:
                            password: 'other_pass'
                            roles: 'ROLE_USER'

        password_hashers:
            App\Entity\User: auto
            Symfony\Component\Security\Core\User\InMemoryUser: plaintext

        firewalls:
            dev:
                pattern: ^/(_(profiler|wdt)|css|images|js)/
                security: false
            main:
                http_basic:
                    realm: Secured Area
                lazy: true
                provider: users_in_memory

        access_control:
            - { path: ^/api/v4/users, roles: ROLE_ADMIN }
